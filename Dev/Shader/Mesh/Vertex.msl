// UniformBuffers:2 BufferCamera:0 BufferObject:1 Attribs:0,1,7
// line above needed.
#include <metal_stdlib>
using namespace metal;

struct VertexIn {
    float3 position [[attribute(0)]];
    float3 normal [[attribute(1)]];
    float2 uv [[attribute(7)]];
};

struct VertexOut {
    float4 position [[position]];
    float2 uv [[user(locn1)]];
    float3 colour [[user(locn2)]];
};

struct UniformCamera
{
    float4x4 viewProj;
    float2 fov;
    float cam_near;
    float cam_far;
    float aspect;
};

struct UniformObject
{
    float4x4 worldMatrix;
    float3 diffuse;
    float alpha;
};

// Constants for the point light (hardcoded)
constant float3 lightPos = float3(10.0f, 10.0f, 10.0f); // Light position in world space

vertex VertexOut main0(VertexIn in [[stage_in]], constant UniformCamera& cam [[buffer(0)]], constant UniformObject& obj [[buffer(1)]]) {
    VertexOut out;

    out.position = cam.viewProj * obj.worldMatrix * float4(in.position, 1.0f);
    
    // Calculate normal in world space (applying world matrix)
    float3 normalWorldSpace = normalize((obj.worldMatrix * float4(in.normal, 0.0f)).xyz);
    
    // Convert input position to world space
    float3 worldPos = (obj.worldMatrix * float4(in.position, 1.0f)).xyz;

    // Compute light direction in world space
    float3 lightDir = normalize(lightPos - worldPos);
    
    // Calculate diffuse lighting based on the normal and light direction (Lambertian model)
    float diff = max(dot(normalWorldSpace, lightDir), 0.0f);

    float3 ambient = 0.6 * obj.diffuse;
    out.colour = (ambient + diff) * obj.diffuse;
    out.uv = in.uv;

    return out;
}
