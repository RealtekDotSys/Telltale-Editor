// UniformBuffers:2 BufferCamera:0 BufferObject:1 Attribs:0,1,7,4,5 StorageBuffers:1 Generic0:0
// line above needed.
#include <metal_stdlib>
using namespace metal;

struct VertexIn
{
    float3 position [[attribute(0)]];
    float3 normal [[attribute(1)]];
    float2 uv [[attribute(7)]];
    uchar4 bone_index [[attribute(5)]];
    float3 bone_weight [[attribute(4)]];
};

struct VertexOut
{
    float4 position [[position]];
    float2 uv [[user(locn1)]];
    float3 colour [[user(locn2)]];
};

struct UniformCamera
{
    float4x4 viewProj;
    float2 fov;
    float cam_near;
    float cam_far;
    float aspect;
};

struct UniformObject
{
    float4x4 worldMatrix;
    float3 diffuse;
    float alpha;
};

// Constants for the point light (hardcoded)
constant float3 lightPos = float3(10.0f, 10.0f, 10.0f); // Light position in world space

vertex VertexOut main0(VertexIn in [[stage_in]], 
    constant UniformCamera& cam [[buffer(0)]], 
    constant UniformObject& obj [[buffer(1)]],
    constant float4x4* boneMatrix [[buffer(2)]],
    uint vertID [[vertex_id]]) { // NOTE: Buffer binding index 2. Generic buffer slots come right AFTER uniform slots (SDL!)
    VertexOut out;

    // SKINNING

    // Read bone indices
    uint i0 = (uint)in.bone_index.x;
    uint i1 = (uint)in.bone_index.y;
    uint i2 = (uint)in.bone_index.z;

    // Read bone weights
    float w0 = in.bone_weight.x;
    float w1 = in.bone_weight.y;
    float w2 = in.bone_weight.z;

    // Compute local model space skinned positions.
    float4 localPos = float4(in.position, 1.0);
    float4x4 skin0 = boneMatrix[i0];
    float4x4 skin1 = boneMatrix[i1];
    float4x4 skin2 = boneMatrix[i2];
    float4 skinnedPosition = ((skin0 * localPos) * w0) + ((skin1 * localPos) * w1) + ((skin2 * localPos) * w2);

    // Apply world and view-projection transform
    out.position = cam.viewProj * obj.worldMatrix * skinnedPosition;
    
    // Calculate normal in world space (applying world matrix)
    float3 normalWorldSpace = normalize((obj.worldMatrix * float4(in.normal, 0.0f)).xyz);
    
    // Convert input position to world space
    float3 worldPos = (obj.worldMatrix * float4(in.position, 1.0f)).xyz;

    // Compute light direction in world space
    float3 lightDir = normalize(lightPos - worldPos);
    
    // Calculate diffuse lighting based on the normal and light direction (Lambertian model)
    float diff = max(dot(normalWorldSpace, lightDir), 0.0f);

    float3 ambient = 0.6 * obj.diffuse;
    out.colour = (ambient + diff) * obj.diffuse;
    //out.colour = ((vertID >= 6628/4) && (vertID <= 7712/4)) ? float3(1.0) : float3(0.0);
    //out.colour = float3(w0,w1,w2);
    out.uv = in.uv;

    return out;
}
